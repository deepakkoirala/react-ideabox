{"version":3,"sources":["assets/close.svg","serviceWorker.js","store/Actiontypes.js","components/Idea/index.js","store/actions/IdeaAction.js","store/actions/ModalAction.js","components/IdeaBoard/index.js","components/CreateIdea/index.js","components/App.js","store/reducers/IdeaReducer.js","index.js","store/reducers/ModalReducer.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","Actiontypes","Idea","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","_this2","react_default","a","createElement","reactstrap_es","inverse","color","style","margin","maxWidth","minWidth","title","src","close","onClick","deleteIdea","key","width","height","float","cursor","description","Component","connect","state","dispatch","index","type","ActionTypes","payload","deleteIdeaAction","handleCreateIdeaModalAction","show","IdeaBoard","ideas","id","content","className","justifyContent","length","md","handleModal","size","map","idea","ind","components_Idea","required","value","undefined","renderFieldInput","_ref","input","label","_ref$meta","meta","touched","error","warning","assign","placeholder","CreateIdea","isOpen","createIdeaModal","onSubmit","handleSubmit","name","Field","component","validate","createIdeaForm","form","reduxForm","App","handelSubmit","e","values","createIdea","resetIdeaForm","showModal","setState","alert","light","expand","href","toggle","navbar","nav","inNavbar","caret","right","divider","components_IdeaBoard","components_CreateIdea","data","createIdeaAction","reset","initialState","reducers","arguments","action","concat","toConsumableArray","newState","splice","formReducer","reducer","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db14af0d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/close.1b286ef8.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default {\n    ACTION_HANDLE_CREATE_IDEA_MODAL: 'ACTION_HANDLE_CREATE_IDEA_MODAL',\n    ACTION_CREATE_IDEA: 'ACTION_CREATE_IDEA',\n    ACTION_DELETE_IDEA: 'ACTION_DELETE_IDEA'\n}","import React, { Component } from 'react'\nimport './style.css'\nimport { Card, CardHeader, CardBody,\n  CardText } from 'reactstrap';\nimport close from './../../assets/close.svg'\nimport {connect} from 'react-redux'\nimport {deleteIdeaAction} from './../../store/actions/IdeaAction'\n\nclass Idea extends Component {\n\n  constructor(props) {\n    super(props)\n    console.log(this.props)\n  }\n\n  render() {\n    return (\n      <div>\n        <Card inverse color=\"info\" style={{margin:'10px', maxWidth:\"15rem\", minWidth:\"15rem\"}}>\n            <CardHeader>\n              {this.props.title}\n              <img src={close} onClick={() => this.props.deleteIdea(this.props.key)} style={{width:15, height:15, float: 'right', cursor:'pointer'}}></img>\n            </CardHeader>\n            <CardBody>\n              {/* <CardTitle>{this.props.title}</CardTitle> */}\n              <CardText>{this.props.description}</CardText>\n            </CardBody>\n          </Card>\n        </div>\n      )\n    }\n}\n\nconst mapDispatchToProps = (dispatch)  => {\n  return {\n    deleteIdea: (index) => dispatch(deleteIdeaAction(index))\n  }\n}\n\nconst mapStateToProps = (state)  => {\n  return {\n    \n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps) (Idea)","import ActionTypes from '../Actiontypes'\nexport const createIdeaAction = (data) => {\n    return {\n        type: ActionTypes.ACTION_CREATE_IDEA,\n        payload: data\n    }\n}\n\nexport const deleteIdeaAction = (index) => {\n    return {\n        type: ActionTypes.ACTION_DELETE_IDEA,\n        payload: index\n    }\n}\n\n","import ActionTypes from '../Actiontypes'\nexport const handleCreateIdeaModalAction = (show) => {\n    return {\n        type: ActionTypes.ACTION_HANDLE_CREATE_IDEA_MODAL,\n        payload: show\n    }\n}\n\n","import React, { Component } from 'react'\nimport './style.css'\nimport {CardDeck, Jumbotron, Button, Row, Col} from 'reactstrap'\nimport Idea from './../Idea'\nimport {connect} from 'react-redux'\nimport {handleCreateIdeaModalAction} from './../../store/actions/ModalAction'\n\nclass IdeaBoard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ideas:[\n        {id: 1, title:'My Idea', content:'This is description'}\n      ]\n    }\n  }\n\n  render() {\n    return (\n      <div>\n      <Jumbotron className=\"idea-box\" style={{\n        justifyContent: this.props.ideas.length>0?'left':'center'\n      }}>\n        <div>\n          { this.props.ideas.length===0 && \n            <Row className=\"create-new-if-zero\">\n              <Col md=\"12\">\n                There are no Ideas, you can <Button onClick={this.props.handleModal}  color=\"link\" size=\"md\">Create New</Button>\n              </Col>\n            </Row> \n          }\n\n          { this.props.ideas.length>0 && \n            <CardDeck>\n              {\n                this.props.ideas.map((idea, ind) => {\n                  return <Idea key={ind} title={idea.title} description={idea.description}/>\n                })\n              }\n              \n            </CardDeck>\n          }\n\n        </div>\n      </Jumbotron>\n    </div>\n      )\n    }\n}\n\nconst mapStateToProps = (state)  => {\n  return {\n    ideas: state.ideas\n  }\n}\n\nconst mapDispatchToProps = (dispatch)  => {\n  return {\n    handleModal: (show) => dispatch(handleCreateIdeaModalAction(show))\n  }\n}\n\n\nexport default connect(\n  mapStateToProps, mapDispatchToProps\n)(IdeaBoard);","import React, { Component } from 'react'\nimport { Field, reduxForm } from 'redux-form'\nimport {connect} from 'react-redux'\nimport {handleCreateIdeaModalAction} from './../../store/actions/ModalAction'\nimport './style.css'\nimport {\n  Button, Modal, ModalHeader, ModalBody, Form,\n  FormGroup,\n  Input,\n  Col,\n  Label\n} from 'reactstrap';\n\n\n\nconst required = value => (value ? undefined : 'Required')\n\nconst renderFieldInput = ({\n  input,\n  label,\n  type,\n  meta: { touched, error, warning }\n}) =>\n  (<div>\n    <FormGroup>\n      <Label>{label}</Label>\n      <Input\n        {...input} placeholder={label} type={type}\n      />\n      {touched && ((error && <span className='error'>{error}</span>) || (warning && <span className='error'>{warning}</span>))}\n    </FormGroup>\n  </div>)\n\n\n\nclass CreateIdea extends Component {\n\n  render() {\n    return (\n      <div>\n        <Modal isOpen={this.props.createIdeaModal.show}>\n          <ModalHeader>Create Idea</ModalHeader>\n          <ModalBody>\n            <Form onSubmit={this.props.handleSubmit} className=\"form\" name=\"formIdea\">\n              <Col>\n              <Field\n                      name=\"title\"\n                      type=\"text\"\n                      component={renderFieldInput}\n                      label=\"Title\"\n                      validate={[required]}\n                    />\n              </Col>\n              <Col>\n                <Field\n                      name=\"description\"\n                      type=\"text\"\n                      component={renderFieldInput}\n                      label=\"Description\"\n                      validate={[required]}\n                    />\n              </Col>\n              <Col>\n                <FormGroup>\n                  <Button color=\"primary\" type=\"submit\">Create</Button>{' '}\n                  <Button color=\"secondary\" onClick={() => this.props.handleModal(false)}>Cancel</Button>\n                </FormGroup>\n              </Col>\n            </Form>\n          </ModalBody>\n          {/* <ModalFooter>\n            <Button color=\"primary\" onClick={() => this.save()}>Create</Button>{' '}\n            <Button color=\"secondary\" onClick={() => this.closeModal()}>Cancel</Button>\n          </ModalFooter> */}\n        </Modal>\n      </div>\n    )\n  }\n}\n\n\nconst mapStateToProps = (state)  => {\n  return {\n    createIdeaModal: state.createIdeaModal,\n    createIdeaForm: state.form\n  }\n}\n\nconst mapDispatchToProps = (dispatch)  => {\n  return {\n    handleModal: (show) => dispatch(handleCreateIdeaModalAction(show))\n  }\n}\n\n\nCreateIdea = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CreateIdea);\n\n\nexport default reduxForm({\n  form: 'CreateIdea' // a unique identifier for this form\n})(CreateIdea)","import React, { Component } from 'react'\nimport IdeaBoard from './IdeaBoard'\nimport CreateIdea from './CreateIdea'\nimport {connect} from 'react-redux'\nimport {handleCreateIdeaModalAction} from './../store/actions/ModalAction'\nimport {createIdeaAction} from './../store/actions/IdeaAction'\nimport {reset} from 'redux-form';\n\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem } from 'reactstrap';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isOpen: false,\n      showModal: false\n    }\n  }\n\n\n  handelSubmit = (e) => {\n    //e.preventDefault()\n    console.log(this.props.createIdeaForm.CreateIdea.values)\n    this.props.createIdea(this.props.createIdeaForm.CreateIdea.values)\n    this.props.handleModal(false)\n    this.props.resetIdeaForm()\n  }\n\n  \n\n  closeModal () {\n    this.setState({\n      showModal: false\n    })\n  }\n\n  save () {\n    alert(\"Hi\")\n  }\n\n  toggle () {\n    this.setState({\n      isOpen: !this.isOpen\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar color=\"light\" light expand=\"md\">\n          <NavbarBrand href=\"/\">IdeaBoard</NavbarBrand>\n          <NavbarToggler onClick={() => this.toggle} />\n          <Collapse isOpen={this.state.isOpen} navbar>\n            <Nav className=\"ml-auto\" navbar>\n              <NavItem>\n                <NavLink onClick={() => this.props.handleModal(true)}>Create New Idea</NavLink>\n              </NavItem>\n              <UncontrolledDropdown nav inNavbar>\n                <DropdownToggle nav caret>\n                  Sagar\n                </DropdownToggle>\n                <DropdownMenu right>\n                  <DropdownItem>\n                    Setting\n                  </DropdownItem>\n                  <DropdownItem>\n                    Profile\n                  </DropdownItem>\n                  <DropdownItem divider />\n                  <DropdownItem>\n                    Logout\n                  </DropdownItem>\n                </DropdownMenu>\n              </UncontrolledDropdown>\n            </Nav>\n          </Collapse>\n        </Navbar>\n        <IdeaBoard/>\n        <CreateIdea showModal={false} onSubmit={this.handelSubmit}/>\n      </div>\n    );\n  }\n}\n\n\nconst mapStateToProps = (state)  => {\n  return {\n    createIdeaModal: state.createIdeaModal,\n    createIdeaForm: state.form\n  }\n}\n\nconst mapDispatchToProps = (dispatch)  => {\n  return {\n    handleModal: (show) => dispatch(handleCreateIdeaModalAction(show)),\n    createIdea: (data) => dispatch(createIdeaAction(data)),\n    resetIdeaForm: () => dispatch(reset('CreateIdea'))\n  }\n}\n\nApp = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n\n\n\nexport default App","import ActionTypes from '../Actiontypes'\nlet initialState = []\nexport const ideaReducer = (state=initialState, action) => {\n    switch(action.type) {\n      case ActionTypes.ACTION_CREATE_IDEA:\n        return [...state, action.payload]\n      case ActionTypes.ACTION_DELETE_IDEA:\n        let newState = [...state];\n        newState.splice(action.payload, 1);\n        return newState;\n      default: \n        return state\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/App'\nimport './theme.scss'\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nimport {createStore, combineReducers} from 'redux';\nimport {reducer as formReducer} from 'redux-form';\nimport { Provider} from 'react-redux';\nimport {createModalReducer} from './store/reducers/ModalReducer'\nimport {ideaReducer} from './store/reducers/IdeaReducer'\n\n\nconst reducers = {\n    ideas: ideaReducer,\n    createIdeaModal: createModalReducer,\n    form: formReducer    // <---- Mounted at 'form'. See note below.\n  }\n\nconst reducer = combineReducers(reducers);\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import ActionTypes from '../Actiontypes'\nexport const createModalReducer = (state={show:false}, action) => {\n    switch(action.type) {\n      case ActionTypes.ACTION_HANDLE_CREATE_IDEA_MODAL:\n        return Object.assign({}, state, {\n            show: action.payload\n        })\n      default: \n        return state\n    }\n  }"],"sourceRoot":""}